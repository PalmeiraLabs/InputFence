{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"InputFence Validation Package","text":"<p>This package contains validators for different types of common data, such as emails, passwords, names, usernames, dates of birth and phone numbers.</p>"},{"location":"index.html#included-validators","title":"Included validators","text":"<ul> <li>AdvancedDateOfBirthValidator</li> <li>RFCCompliantEmailValidator</li> <li>SimpleEmailValidator</li> <li>SmartEmailValidator</li> <li>AdvancedNameValidator</li> <li>AdvancedPasswordValidator</li> <li>AdvancedPhoneValidator</li> </ul> <p>This package provides a set of protocols and generic structures to validate user inputs such as emails, passwords, names, dates of birth, and phone numbers.</p> <ul> <li><code>ValidatorProtocol</code></li> <li><code>EmailValidatorProtocol</code></li> <li><code>PasswordValidatorProtocol</code></li> <li><code>NameValidatorProtocol</code></li> <li><code>DateOfBirthValidatorProtocol</code></li> <li><code>PhoneValidatorProtocol</code></li> <li><code>FieldValidator</code></li> <li>Typealiases for specific field validators</li> </ul> <p>You can navigate to each validator for more details.</p>"},{"location":"advanced-date-of-birth.html","title":"AdvancedDateOfBirthValidator","text":"<p>Validator for birth dates in the \"dd/MM/yyyy\" format.</p>"},{"location":"advanced-date-of-birth.html#description","title":"Description","text":"<p>Validates that: - The string is not empty. - It has exactly 10 characters (expected format). - The date is valid and not in the future. - The calculated age is within the allowed range (default is 18 to 120 years).</p>"},{"location":"advanced-date-of-birth.html#usage","title":"Usage","text":"<pre><code>let validator = AdvancedDateOfBirthValidator()\nvalidator.isValid(\"01/01/2000\") // true o false\n</code></pre>"},{"location":"advanced-date-of-birth.html#configuration","title":"Configuration","text":"<p>Can be configured via DateOfBirthValidatorParameters to change the minimum and maximum age.</p>"},{"location":"advanced-date-of-birth.html#properties","title":"Properties","text":"<ul> <li><code>parameters</code>: Validation configuration parameters.</li> </ul>"},{"location":"advanced-date-of-birth.html#metodos","title":"M\u00e9todos","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code> - Validates the date.</li> </ul>"},{"location":"advanced-name.html","title":"AdvancedNameValidator","text":"<p>Advanced validator for names, surnames, usernames.</p>"},{"location":"advanced-name.html#descripcion","title":"Descripci\u00f3n","text":"<p>Validates the following: - Name value not empty. - The amount of characters inside the permitted range (default 2 to 25). - Optional, only letters permitted.</p>"},{"location":"advanced-name.html#uso","title":"Uso","text":"<pre><code>let validator = AdvancedNameValidator()\nvalidator.isValid(\"Agust\u00edn\") // true o false\n</code></pre>"},{"location":"advanced-name.html#configuration","title":"Configuration","text":"<p>Can be configured with <code>NameValidatorParameters</code>.</p>"},{"location":"advanced-name.html#properties","title":"Properties","text":"<ul> <li><code>parameters</code>: Validation parameters.</li> </ul>"},{"location":"advanced-name.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"advanced-password.html","title":"AdvancedPasswordValidator","text":"<p>Advanced validator for passwords.</p>"},{"location":"advanced-password.html#description","title":"Description","text":"<p>Validates that the password follows the following items:</p> <ul> <li>Minimum and maximum length (by default 5 to 30 characters).</li> <li>Minimum amount of numbers.</li> <li>Minimum amount of special characters defined.</li> </ul>"},{"location":"advanced-password.html#usage","title":"Usage","text":"<pre><code>let validator = AdvancedPasswordValidator()\nvalidator.isValid(\"P@ssw0rd123\") // true o false\n</code></pre>"},{"location":"advanced-password.html#configuration","title":"Configuration","text":"<p>Can be configured with <code>PasswordValidatorParameters</code>.</p>"},{"location":"advanced-password.html#properties","title":"Properties","text":"<ul> <li><code>parameters</code>: Validation parameters.</li> </ul>"},{"location":"advanced-password.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"advanced-phone.html","title":"AdvancedPhoneValidator","text":"<p>Advanced validator for phone numbers.</p>"},{"location":"advanced-phone.html#description","title":"Description","text":"<p>Uses the library <code>PhoneNumberKit</code> to validate phone numbers.</p> <p>Allows to configure:</p> <ul> <li>If only numbers are allowed.</li> <li>Region for the phone format (by default \"US\").</li> </ul>"},{"location":"advanced-phone.html#usage","title":"Usage","text":"<pre><code>let validator = AdvancedPhoneValidator()\nvalidator.isValid(\"+1 650-555-1234\") // true o false\n</code></pre>"},{"location":"advanced-phone.html#configuration","title":"Configuration","text":"<p>Can be configured with <code>PhoneValidatorParameters</code>.</p>"},{"location":"advanced-phone.html#properties","title":"Properties","text":"<ul> <li><code>parameters</code>: Validation parameters.</li> </ul>"},{"location":"advanced-phone.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"date-of-birth-validator-parameters.html","title":"DateOfBirthValidatorParameters","text":""},{"location":"date-of-birth-validator-parameters.html#overview","title":"Overview","text":"<p><code>DateOfBirthValidatorParameters</code> defines the configuration for validating a date of birth. It allows specifying the minimum and maximum allowed ages.</p>"},{"location":"date-of-birth-validator-parameters.html#properties","title":"Properties","text":"<ul> <li>minAge (<code>Int</code>): The minimum allowed age (inclusive). Default: <code>18</code>.</li> <li>maxAge (<code>Int</code>): The maximum allowed age (inclusive). Default: <code>120</code>.</li> </ul>"},{"location":"date-of-birth-validator-parameters.html#default-values","title":"Default Values","text":"<ul> <li><code>defaultMinAge</code>: 18</li> <li><code>defaultMaxAge</code>: 120</li> </ul>"},{"location":"date-of-birth-validator-parameters.html#initializer","title":"Initializer","text":"<pre><code>init(minAge: Int = Self.defaultMinAge, maxAge: Int = Self.defaultMaxAge)\n</code></pre> <p>Creates a new instance with optional custom min and max ages.</p>"},{"location":"date-of-birth-validator-parameters.html#usage-example","title":"Usage Example","text":"<pre><code>let params = DateOfBirthValidatorParameters(minAge: 21, maxAge: 65)\n</code></pre>"},{"location":"dateofbirth-validator-protocol.html","title":"DateOfBirthValidatorProtocol","text":"<p>The <code>DateOfBirthValidatorProtocol</code> extends <code>ValidatorProtocol</code> to specifically validate dates of birth.</p>"},{"location":"dateofbirth-validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol DateOfBirthValidatorProtocol: ValidatorProtocol {}\n</code></pre>"},{"location":"email-validator-protocol.html","title":"EmailValidatorProtocol","text":"<p>The <code>EmailValidatorProtocol</code> extends <code>ValidatorProtocol</code> to specifically validate email addresses.</p>"},{"location":"email-validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol EmailValidatorProtocol: ValidatorProtocol {}\n</code></pre>"},{"location":"field-validator.html","title":"FieldValidator","text":"<p>The <code>FieldValidator</code> is a generic structure that works with any validator conforming to <code>ValidatorProtocol</code>.</p>"},{"location":"field-validator.html#declaration","title":"Declaration","text":"<pre><code>public struct FieldValidator&lt;T: ValidatorProtocol&gt; {\n    private var validator: T\n    private var value: String\n\n    public init(validator: T, value: String) {\n        self.validator = validator\n        self.value = value\n    }\n\n    public mutating func config(validator: T, value: String) {\n        self.validator = validator\n        self.value = value\n    }\n\n    public func isValid() -&gt; Bool {\n        return validator.isValid(self.value)\n    }\n}\n</code></pre>"},{"location":"field-validator.html#overview","title":"Overview","text":"<p><code>FieldValidator</code> holds both the validator instance and the value to be validated. It provides an <code>isValid()</code> method to check whether the stored value passes the given validator's rules.</p>"},{"location":"name-validator-parameters.html","title":"NameValidatorParameters","text":""},{"location":"name-validator-parameters.html#overview","title":"Overview","text":"<p><code>NameValidatorParameters</code> configures name validation rules, including minimum and maximum length, and whether only letters are allowed.</p>"},{"location":"name-validator-parameters.html#properties","title":"Properties","text":"<ul> <li>minAmountOfCharacters (<code>Int</code>): Minimum allowed characters. Default: <code>2</code>.</li> <li>maxAmountOfCharacters (<code>Int</code>): Maximum allowed characters. Default: <code>25</code>.</li> <li>shouldHaveOnlyLetters (<code>Bool</code>): Restrict to letters only. Default: <code>true</code>.</li> </ul>"},{"location":"name-validator-parameters.html#default-values","title":"Default Values","text":"<ul> <li><code>defaultMinCharacters</code>: 2</li> <li><code>defaultMaxCharacters</code>: 25</li> </ul>"},{"location":"name-validator-parameters.html#initializer","title":"Initializer","text":"<pre><code>init(minAmountOfCharacters: Int = Self.defaultMinCharacters,\n     maxAmountOfCharacters: Int = Self.defaultMaxCharacters,\n     shouldHaveOnlyLetters: Bool = true)\n</code></pre>"},{"location":"name-validator-parameters.html#usage-example","title":"Usage Example","text":"<pre><code>let params = NameValidatorParameters(minAmountOfCharacters: 3, maxAmountOfCharacters: 20)\n</code></pre>"},{"location":"name-validator-protocol.html","title":"NameValidatorProtocol","text":"<p>The <code>NameValidatorProtocol</code> extends <code>ValidatorProtocol</code> to specifically validate personal names.</p>"},{"location":"name-validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol NameValidatorProtocol: ValidatorProtocol {}\n</code></pre>"},{"location":"password-validator-parameters.html","title":"PasswordValidatorParameters","text":""},{"location":"password-validator-parameters.html#overview","title":"Overview","text":"<p><code>PasswordValidatorParameters</code> configures password validation rules, such as length, number of special characters, numbers, and allowed special characters.</p>"},{"location":"password-validator-parameters.html#properties","title":"Properties","text":"<ul> <li>minAmountOfCharacters (<code>Int</code>): Minimum allowed characters. Default: <code>5</code>.</li> <li>maxAmountOfCharacters (<code>Int</code>): Maximum allowed characters. Default: <code>30</code>.</li> <li>minAmountOfSpecialCharacters (<code>Int</code>): Minimum special characters. Default: <code>1</code>.</li> <li>minAmountOfNumbers (<code>Int</code>): Minimum numeric digits. Default: <code>1</code>.</li> <li>specialCharacters (<code>String</code>): Allowed special characters.</li> </ul>"},{"location":"password-validator-parameters.html#default-values","title":"Default Values","text":"<ul> <li><code>defaultMinCharacters</code>: 5</li> <li><code>defaultMaxCharacters</code>: 30</li> <li><code>defaultMinSpecialCharacters</code>: 1</li> <li><code>defaultMinNumbers</code>: 1</li> <li><code>defaultSpecialCharacters</code>: <code>!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_</code>{|}~`</li> </ul>"},{"location":"password-validator-parameters.html#initializer","title":"Initializer","text":"<pre><code>init(minAmountOfCharacters: Int = Self.defaultMinCharacters,\n     maxAmountOfCharacters: Int = Self.defaultMaxCharacters,\n     minAmountOfSpecialCharacters: Int = Self.defaultMinSpecialCharacters,\n     minAmountOfNumbers: Int = Self.defaultMinNumbers,\n     specialCharacters: String = Self.defaultSpecialCharacters)\n</code></pre>"},{"location":"password-validator-parameters.html#usage-example","title":"Usage Example","text":"<pre><code>let params = PasswordValidatorParameters(minAmountOfCharacters: 8, minAmountOfNumbers: 2)\n</code></pre>"},{"location":"password-validator-protocol.html","title":"PasswordValidatorProtocol","text":"<p>The <code>PasswordValidatorProtocol</code> extends <code>ValidatorProtocol</code> to specifically validate passwords.</p>"},{"location":"password-validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol PasswordValidatorProtocol: ValidatorProtocol {}\n</code></pre>"},{"location":"phone-validator-parameters.html","title":"PhoneValidatorParameters","text":""},{"location":"phone-validator-parameters.html#overview","title":"Overview","text":"<p><code>PhoneValidatorParameters</code> defines rules for phone number validation, such as whether only numbers are allowed and the region code.</p>"},{"location":"phone-validator-parameters.html#properties","title":"Properties","text":"<ul> <li>isOnlyNumbersAllowed (<code>Bool</code>): If <code>true</code>, only numeric characters are allowed. Default: <code>false</code>.</li> <li>region (<code>String</code>): Region code for validation. Default: <code>\"US\"</code>.</li> </ul>"},{"location":"phone-validator-parameters.html#default-values","title":"Default Values","text":"<ul> <li><code>defaultIsOnlyNumbersAllowed</code>: false</li> <li><code>defaultRegion</code>: \"US\"</li> </ul>"},{"location":"phone-validator-parameters.html#initializer","title":"Initializer","text":"<pre><code>init(isOnlyNumbersAllowd: Bool = Self.defaultIsOnlyNumbersAllowed,\n     region: String = Self.defaultRegion)\n</code></pre>"},{"location":"phone-validator-parameters.html#usage-example","title":"Usage Example","text":"<pre><code>let params = PhoneValidatorParameters(isOnlyNumbersAllowd: true, region: \"UK\")\n</code></pre>"},{"location":"phone-validator-protocol.html","title":"PhoneValidatorProtocol","text":"<p>The <code>PhoneValidatorProtocol</code> extends <code>ValidatorProtocol</code> to specifically validate phone numbers.</p>"},{"location":"phone-validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol PhoneValidatorProtocol: ValidatorProtocol {}\n</code></pre>"},{"location":"protocols.html","title":"Validation Protocolos","text":"<p>Protocols definition for validators.</p>"},{"location":"protocols.html#validatorprotocol","title":"ValidatorProtocol","text":"<p>Base protocol that defines the method:</p> <pre><code>func isValid(_ value: String) -&gt; Bool\n</code></pre>"},{"location":"protocols.html#specific-protocols-especificos","title":"Specific protocols espec\u00edficos","text":"<p>They inherit <code>ValidatorProtocol</code> for different types:</p> <ul> <li><code>EmailValidatorProtocol</code></li> <li><code>PasswordValidatorProtocol</code></li> <li><code>NameValidatorProtocol</code></li> <li><code>DateOfBirthValidatorProtocol</code></li> <li><code>PhoneValidatorProtocol</code></li> </ul> <p>These protocols doesn't add methods, they are just useful for specific validators.</p>"},{"location":"rfc-compliant-email.html","title":"RFCCompliantEmailValidator","text":"<p>Email validator that meets the RFC standard.</p>"},{"location":"rfc-compliant-email.html#description","title":"Description","text":"<p>Use a complex regular expression to validate the emails structure.</p>"},{"location":"rfc-compliant-email.html#usage","title":"Usage","text":"<pre><code>let validator = RFCCompliantEmailValidator()\nvalidator.isValid(\"usuario@dominio.com\") // true o false\n</code></pre>"},{"location":"rfc-compliant-email.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"simple-email.html","title":"SimpleEmailValidator","text":"<p>Simple validator for emails that uses a simple regular expression.</p>"},{"location":"simple-email.html#description","title":"Description","text":"<p>Validates that the email has the basic format: local@domain.ext</p>"},{"location":"simple-email.html#usage","title":"Usage","text":"<pre><code>let validator = SimpleEmailValidator()\nvalidator.isValid(\"usuario@domain.com\") // true o false\n</code></pre>"},{"location":"simple-email.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"smart-email.html","title":"SmartEmailValidator","text":"<p>Validator that uses NSDataDetector to validate emails.</p>"},{"location":"smart-email.html#description","title":"Description","text":"<p>Uses apple data detector to identify if the complete string is a valid email.</p>"},{"location":"smart-email.html#usage","title":"Usage","text":"<pre><code>let validator = SmartEmailValidator()\nvalidator.isValid(\"usuario@dominio.com\") // true o false\n</code></pre>"},{"location":"smart-email.html#methods","title":"Methods","text":"<ul> <li><code>isValid(_ value: String) -&gt; Bool</code></li> </ul>"},{"location":"typealiases.html","title":"Validator Typealiases","text":"<p>These typealiases provide convenient names for specific validators:</p> <pre><code>public typealias EmailValidator&lt;T: EmailValidatorProtocol&gt; = FieldValidator&lt;T&gt;\npublic typealias PasswordValidator&lt;T: PasswordValidatorProtocol&gt; = FieldValidator&lt;T&gt;\npublic typealias NameValidator&lt;T: NameValidatorProtocol&gt; = FieldValidator&lt;T&gt;\npublic typealias UsernameValidator&lt;T: NameValidatorProtocol&gt; = FieldValidator&lt;T&gt;\npublic typealias PhoneValidator&lt;T: PhoneValidatorProtocol&gt; = FieldValidator&lt;T&gt;\n</code></pre>"},{"location":"validator-protocol.html","title":"ValidatorProtocol","text":"<p>The <code>ValidatorProtocol</code> defines the base interface for any type of validator.</p>"},{"location":"validator-protocol.html#declaration","title":"Declaration","text":"<pre><code>public protocol ValidatorProtocol {\n    func isValid(_ value: String) -&gt; Bool\n}\n</code></pre>"},{"location":"validator-protocol.html#overview","title":"Overview","text":"<p>Any type conforming to this protocol must implement the <code>isValid(_:)</code> method to determine whether a given string value meets the expected validation rules.</p>"}]}